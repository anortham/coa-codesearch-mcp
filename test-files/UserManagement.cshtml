@page "/users"
@model UserManagementModel
@{
    ViewData["Title"] = "User Management";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>
    
    <div class="user-stats">
        <p>Total Users: @Model.TotalUsers</p>
        <p>Active Users: @Model.ActiveUsers</p>
    </div>
    
    <form method="post" asp-page-handler="CreateUser">
        <div class="form-group">
            <label asp-for="NewUser.Name"></label>
            <input asp-for="NewUser.Name" class="form-control" />
            <span asp-validation-for="NewUser.Name" class="text-danger"></span>
        </div>
        
        <div class="form-group">
            <label asp-for="NewUser.Email"></label>
            <input asp-for="NewUser.Email" class="form-control" />
            <span asp-validation-for="NewUser.Email" class="text-danger"></span>
        </div>
        
        <button type="submit" class="btn btn-primary">Create User</button>
    </form>
    
    <table class="table mt-4">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>
                        @if (user.IsActive)
                        {
                            <span class="badge badge-success">Active</span>
                        }
                        else
                        {
                            <span class="badge badge-secondary">Inactive</span>
                        }
                    </td>
                    <td>
                        <form method="post" asp-page-handler="DeleteUser" asp-route-id="@user.Id" style="display: inline;">
                            <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure?')">
                                Delete
                            </button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public class UserManagementModel : PageModel
    {
        private readonly IUserService _userService;
        private readonly ILogger<UserManagementModel> _logger;
        
        public UserManagementModel(IUserService userService, ILogger<UserManagementModel> logger)
        {
            _userService = userService ?? throw new ArgumentNullException(nameof(userService));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }
        
        public List<User> Users { get; set; } = new();
        public User NewUser { get; set; } = new();
        public int TotalUsers => Users.Count;
        public int ActiveUsers => Users.Count(u => u.IsActive);
        
        public async Task<IActionResult> OnGetAsync()
        {
            try
            {
                Users = await _userService.GetAllUsersAsync();
                return Page();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load users");
                return RedirectToPage("/Error");
            }
        }
        
        public async Task<IActionResult> OnPostCreateUserAsync()
        {
            if (!ModelState.IsValid)
            {
                Users = await _userService.GetAllUsersAsync();
                return Page();
            }
            
            try
            {
                await _userService.CreateUserAsync(NewUser);
                return RedirectToPage();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to create user: {Email}", NewUser.Email);
                ModelState.AddModelError("", "Failed to create user. Please try again.");
                Users = await _userService.GetAllUsersAsync();
                return Page();
            }
        }
        
        public async Task<IActionResult> OnPostDeleteUserAsync(int id)
        {
            try
            {
                await _userService.DeleteUserAsync(id);
                return RedirectToPage();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to delete user with ID: {UserId}", id);
                return RedirectToPage();
            }
        }
    }
    
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public bool IsActive { get; set; } = true;
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
    
    public interface IUserService
    {
        Task<List<User>> GetAllUsersAsync();
        Task<User?> GetUserByIdAsync(int id);
        Task CreateUserAsync(User user);
        Task UpdateUserAsync(User user);
        Task DeleteUserAsync(int id);
    }
}