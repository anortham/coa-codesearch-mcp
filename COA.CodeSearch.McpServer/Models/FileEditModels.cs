using DiffMatchPatch;

namespace COA.CodeSearch.McpServer.Models;

/// <summary>
/// Options for configuring file edit operations
/// </summary>
public class EditOptions
{
    /// <summary>
    /// If true, don't actually modify files - just return what would be changed
    /// </summary>
    public bool PreviewMode { get; set; } = true;

    /// <summary>
    /// Pattern matching mode: literal, regex, fuzzy, semantic
    /// </summary>
    public string MatchMode { get; set; } = "literal";

    /// <summary>
    /// Whether pattern matching should be case sensitive
    /// </summary>
    public bool CaseSensitive { get; set; } = false;

    /// <summary>
    /// Maximum number of matches to process (for performance)
    /// </summary>
    public int MaxMatches { get; set; } = 1000;

    /// <summary>
    /// Number of context lines to include in results
    /// </summary>
    public int ContextLines { get; set; } = 3;

    /// <summary>
    /// Fuzzy match threshold (0.0-1.0) - only used when MatchMode = "fuzzy"
    /// 0.0 = perfect match, 0.8 = high tolerance (default), 1.0 = match anything
    /// </summary>
    public float FuzzyThreshold { get; set; } = 0.8f;

    /// <summary>
    /// Fuzzy match distance in characters - only used when MatchMode = "fuzzy"
    /// Higher = slower but more comprehensive search
    /// </summary>
    public int FuzzyDistance { get; set; } = 1000;
}

/// <summary>
/// Result of a file editing operation using DiffMatchPatch
/// </summary>
public class FileEditResult
{
    /// <summary>
    /// Whether the operation completed successfully
    /// </summary>
    public bool Success { get; set; }

    /// <summary>
    /// Path to the file that was edited
    /// </summary>
    public string FilePath { get; set; } = string.Empty;

    /// <summary>
    /// Whether any changes were actually made to the content
    /// </summary>
    public bool ChangesMade { get; set; }

    /// <summary>
    /// Original file content before changes
    /// </summary>
    public string? OriginalContent { get; set; }

    /// <summary>
    /// Modified content after applying changes
    /// </summary>
    public string? ModifiedContent { get; set; }

    /// <summary>
    /// List of diffs generated by DiffMatchPatch
    /// </summary>
    public List<Diff> Diffs { get; set; } = new();

    /// <summary>
    /// Human-readable summary of changes made
    /// </summary>
    public string Summary { get; set; } = string.Empty;

    /// <summary>
    /// Error message if Success is false
    /// </summary>
    public string? ErrorMessage { get; set; }

    /// <summary>
    /// Content that was deleted (for recovery purposes)
    /// </summary>
    public string? DeletedContent { get; set; }

    /// <summary>
    /// Indentation that was detected and applied during the operation
    /// </summary>
    public string? DetectedIndentation { get; set; }

    /// <summary>
    /// Additional metadata about the operation
    /// </summary>
    public Dictionary<string, object> Metadata { get; set; } = new();
}

/// <summary>
/// Extended workspace metadata for tracking allowed editing locations
/// Extends the existing WorkspaceMetadata with permission tracking
/// </summary>
public class WorkspacePermissionMetadata
{
    /// <summary>
    /// Primary workspace path where indexes are stored
    /// </summary>
    public string PrimaryWorkspace { get; set; } = string.Empty;

    /// <summary>
    /// List of workspaces where editing is allowed
    /// </summary>
    public List<AllowedWorkspace> AllowedWorkspaces { get; set; } = new();

    /// <summary>
    /// When this metadata was created
    /// </summary>
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// When this metadata was last updated
    /// </summary>
    public DateTime LastUpdated { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Version of the metadata schema
    /// </summary>
    public string Version { get; set; } = "1.0";
}

/// <summary>
/// Information about a workspace that is allowed for editing
/// </summary>
public class AllowedWorkspace
{
    /// <summary>
    /// Full path to the workspace
    /// </summary>
    public string Path { get; set; } = string.Empty;

    /// <summary>
    /// Hash of the workspace path for index identification
    /// </summary>
    public string Hash { get; set; } = string.Empty;

    /// <summary>
    /// Whether this workspace has been indexed
    /// </summary>
    public bool Indexed { get; set; }

    /// <summary>
    /// Whether editing operations are allowed in this workspace
    /// </summary>
    public bool Editable { get; set; } = true;

    /// <summary>
    /// When this workspace was added to the allowed list
    /// </summary>
    public DateTime AddedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Reason why this workspace was added (for audit trail)
    /// </summary>
    public string Reason { get; set; } = string.Empty;

    /// <summary>
    /// User or system that added this workspace
    /// </summary>
    public string AddedBy { get; set; } = "system";

    /// <summary>
    /// Whether this workspace is currently active/accessible
    /// </summary>
    public bool IsActive { get; set; } = true;
}

/// <summary>
/// Request for validating if an edit operation is allowed
/// </summary>
public class EditPermissionRequest
{
    /// <summary>
    /// File path being edited
    /// </summary>
    public string FilePath { get; set; } = string.Empty;

    /// <summary>
    /// Type of edit operation (search_replace, insert, delete, etc.)
    /// </summary>
    public string OperationType { get; set; } = string.Empty;

    /// <summary>
    /// Context about why this edit is being performed
    /// </summary>
    public string Context { get; set; } = string.Empty;
}

/// <summary>
/// Result of edit permission validation
/// </summary>
public class EditPermissionResult
{
    /// <summary>
    /// Whether the edit is allowed
    /// </summary>
    public bool Allowed { get; set; }

    /// <summary>
    /// Reason for allowing or denying the edit
    /// </summary>
    public string Reason { get; set; } = string.Empty;

    /// <summary>
    /// The workspace that contains this file
    /// </summary>
    public AllowedWorkspace? Workspace { get; set; }

    /// <summary>
    /// Suggestions if the edit was denied
    /// </summary>
    public List<string> Suggestions { get; set; } = new();
}